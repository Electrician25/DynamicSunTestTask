@using DynamicSunTestTask.CrudServices;
@model PaginatedList<DynamicSunTestTask.Entites.WheatherColumn>
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewData["Title"] = "Arhive";
}

<h1>Wheather Conditions</h1>

<p>
    <a asp-controller="BufferedFileUpload" asp-action="AddArhive">AddArhive</a>
</p>

<form asp-action="Arhive" method="get">
    <div class="form-actions no-color">
        <p>
            Find by date: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Arhive">Back to beginning</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-controller="ViewArhive" asp-action="Arhive" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Date</a>
            </th>
            <th>
                MoscowTime
            </th>
            <th>
                Temperature
            </th>
            <th>
                AirHumidity
            </th>
            <th>
                DewPoint
            </th>
            <th>
                Pressure
            </th>
            <th>
                DirectionOfTheWind
            </th>
            <th>
                WindSpeed
            </th>
            <th>
                Cloudy
            </th>
            <th>
                LowerCloudLimit
            </th>
            <th>
                HorizontalVisibility
            </th>
            <th>
                WeatherConditions
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MoscowTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Temperature)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AirHumidity)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DewPoint)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Pressure)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DirectionOfTheWind)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.WindSpeed)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cloudy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LowerCloudLimit)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.HorizontalVisibility)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.WeatherConditions)
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Arhive"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Arhive"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
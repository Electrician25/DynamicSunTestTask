// <auto-generated />
using DynamicSunTestTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DynamicSunTestTask.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DynamicSunTestTask.Entites.WheatherColumnEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("AirHumidity")
                        .HasColumnType("double precision");

                    b.Property<int>("Cloudy")
                        .HasColumnType("integer");

                    b.Property<int>("Date")
                        .HasColumnType("integer");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<string>("DirectionOfTheWind")
                        .HasColumnType("text");

                    b.Property<int>("HorizontalVisibility")
                        .HasColumnType("integer");

                    b.Property<string>("MoskowTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Pressure")
                        .HasColumnType("integer");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("WeatherConditions")
                        .HasColumnType("text");

                    b.Property<string>("WindSpeed")
                        .HasColumnType("text");

                    b.Property<int>("lowerCloudLimit")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("WheatherColumnsEntitis");
                });
#pragma warning restore 612, 618
        }
    }
}
